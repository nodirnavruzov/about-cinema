const { Scenes, Markup, Telegraf } = require('telegraf');
const PublicWatchlist = require('../model/publicWatchlist');

const settingsScene = new Scenes.BaseScene('settingsScene')

settingsScene.enter(async (ctx) => {

  await ctx.reply('–í—ã–±–µ—Ä–∏ –º–µ–Ω—é', Markup
  .keyboard([
    ['–ü–ª–µ–π–ª–∏—Å—Ç'],
  ]).oneTime().resize())  
})

settingsScene.start(async (ctx) => {
  try {
    await ctx.reply(`–ü—Ä–∏–≤–µ—Ç ${ctx.update.message.from.first_name} ü•∞ –Ø –∑–Ω–∞—é –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö üôÉ`)
    await ctx.reply(`–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ? /help`)
  } catch (error) {
    console.log('error', error)
  }
})

settingsScene.help(async (ctx) => {
  helpButton(ctx)
})

settingsScene.command('menu', async (ctx) => {
  menuButton(ctx)
})

settingsScene.command('search', async (ctx) => {
  ctx.scene.enter('searchCinemaScene')
})

settingsScene.command('top', async (ctx) => {
  ctx.scene.enter('topScene')
})

settingsScene.command('popular', async (ctx) => {
  ctx.scene.enter('popularScene')
})

settingsScene.command('watchlist', async (ctx) => {
  ctx.scene.enter('watchlistScene')
})

settingsScene.command('publicwl', async (ctx) => {
  ctx.scene.enter('publicWatchlistScene')
})

settingsScene.command('settings', async (ctx) => {
  ctx.scene.enter('settingsScene')
})

settingsScene.hears('–ü–ª–µ–π–ª–∏—Å—Ç', async (ctx) => {
  const tg_id = ctx.update.message.from.id
  const result = await PublicWatchlist.findOne({tg_id, status: true})
  console.log('result', result)
  if (!result) {
    await ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞\n–¢–µ–∫—É—â–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π</b>', {parse_mode: 'HTML',
      ...Markup.inlineKeyboard(
        [
          Markup.button.callback(`–°–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º`, `yes_${tg_id}`) 
        ]
      )
    })
  } else {
    await ctx.replyWithHTML('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞\n–¢–µ–∫—É—â–∞—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ü—É–±–ª–∏—á–Ω—ã–π</b>',{parse_mode: 'HTML',
      ...Markup.inlineKeyboard(
        [
          Markup.button.callback(`–°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–º`, `no_${tg_id}`) 
        ]
      )
    })
  }
})

settingsScene.action(/(yes_.+)/, async (ctx) => {
  try {
    const messId = ctx.update.callback_query.message.message_id
    const tg_id = ctx.update.callback_query.from.id
    const username = ctx.update.callback_query.from.username
    await PublicWatchlist.updateOne({tg_id}, {status: true, username}, {upsert : true })
    await ctx.answerCbQuery()
    await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
    await ctx.telegram.deleteMessage(ctx.update.callback_query.message.chat.id, messId)
  } catch (error) {	
    console.log('error', error)
    return await ctx.reply(`–£–ø—Å! –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!`)
  }
})

settingsScene.action(/(no_.+)/, async (ctx) => {
  try {
    const tg_id = ctx.update.callback_query.from.id
    const messId = ctx.update.callback_query.message.message_id
    const username = ctx.update.callback_query.from.username
    await PublicWatchlist.updateOne({tg_id}, {status: false, username}, {upsert : true })
    await ctx.answerCbQuery()
    await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
    await ctx.telegram.deleteMessage(ctx.update.callback_query.message.chat.id, messId)
  } catch (error) {	
    console.log('error', error)
    return await ctx.reply(`–£–ø—Å! –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!`)
  }
})


module.exports = settingsScene
